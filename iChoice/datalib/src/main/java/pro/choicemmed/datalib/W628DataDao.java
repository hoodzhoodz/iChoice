package pro.choicemmed.datalib;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "W628_DATA".
*/
public class W628DataDao extends AbstractDao<W628Data, String> {

    public static final String TABLENAME = "W628_DATA";

    /**
     * Properties of entity W628Data.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property StartDate = new Property(2, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(3, String.class, "endDate", false, "END_DATE");
        public final static Property Series = new Property(4, String.class, "series", false, "SERIES");
        public final static Property AccountKey = new Property(5, String.class, "accountKey", false, "ACCOUNT_KEY");
        public final static Property UpLoadFlag = new Property(6, String.class, "upLoadFlag", false, "UP_LOAD_FLAG");
    }


    public W628DataDao(DaoConfig config) {
        super(config);
    }
    
    public W628DataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"W628_DATA\" (" + //
                "\"UUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "\"USER_ID\" TEXT," + // 1: userId
                "\"START_DATE\" TEXT," + // 2: startDate
                "\"END_DATE\" TEXT," + // 3: endDate
                "\"SERIES\" TEXT," + // 4: series
                "\"ACCOUNT_KEY\" TEXT," + // 5: accountKey
                "\"UP_LOAD_FLAG\" TEXT);"); // 6: upLoadFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"W628_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, W628Data entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(3, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(4, endDate);
        }
 
        String series = entity.getSeries();
        if (series != null) {
            stmt.bindString(5, series);
        }
 
        String accountKey = entity.getAccountKey();
        if (accountKey != null) {
            stmt.bindString(6, accountKey);
        }
 
        String upLoadFlag = entity.getUpLoadFlag();
        if (upLoadFlag != null) {
            stmt.bindString(7, upLoadFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, W628Data entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(3, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(4, endDate);
        }
 
        String series = entity.getSeries();
        if (series != null) {
            stmt.bindString(5, series);
        }
 
        String accountKey = entity.getAccountKey();
        if (accountKey != null) {
            stmt.bindString(6, accountKey);
        }
 
        String upLoadFlag = entity.getUpLoadFlag();
        if (upLoadFlag != null) {
            stmt.bindString(7, upLoadFlag);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public W628Data readEntity(Cursor cursor, int offset) {
        W628Data entity = new W628Data( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // startDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // endDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // series
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // accountKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // upLoadFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, W628Data entity, int offset) {
        entity.setUuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSeries(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAccountKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpLoadFlag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(W628Data entity, long rowId) {
        return entity.getUuid();
    }
    
    @Override
    public String getKey(W628Data entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(W628Data entity) {
        return entity.getUuid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
