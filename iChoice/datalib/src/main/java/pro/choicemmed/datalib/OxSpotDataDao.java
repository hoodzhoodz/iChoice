package pro.choicemmed.datalib;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OX_SPOT_DATA".
*/
public class OxSpotDataDao extends AbstractDao<OxSpotData, String> {

    public static final String TABLENAME = "OX_SPOT_DATA";

    /**
     * Properties of entity OxSpotData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property DeviceName = new Property(1, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property ServerId = new Property(3, String.class, "serverId", false, "SERVER_ID");
        public final static Property MeasureDateTime = new Property(4, String.class, "measureDateTime", false, "MEASURE_DATE_TIME");
        public final static Property LastUpdateTime = new Property(5, String.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
        public final static Property LastUploadTime = new Property(6, String.class, "lastUploadTime", false, "LAST_UPLOAD_TIME");
        public final static Property BloodOxygen = new Property(7, int.class, "bloodOxygen", false, "BLOOD_OXYGEN");
        public final static Property Pi = new Property(8, float.class, "pi", false, "PI");
        public final static Property PulseRate = new Property(9, int.class, "pulseRate", false, "PULSE_RATE");
        public final static Property RR = new Property(10, int.class, "RR", false, "RR");
        public final static Property DeviceId = new Property(11, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property SyncState = new Property(12, int.class, "syncState", false, "SYNC_STATE");
        public final static Property CreateTime = new Property(13, String.class, "createTime", false, "CREATE_TIME");
        public final static Property LogDateTime = new Property(14, String.class, "logDateTime", false, "LOG_DATE_TIME");
    }


    public OxSpotDataDao(DaoConfig config) {
        super(config);
    }
    
    public OxSpotDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OX_SPOT_DATA\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"DEVICE_NAME\" TEXT," + // 1: deviceName
                "\"USER_ID\" TEXT," + // 2: userId
                "\"SERVER_ID\" TEXT," + // 3: serverId
                "\"MEASURE_DATE_TIME\" TEXT," + // 4: measureDateTime
                "\"LAST_UPDATE_TIME\" TEXT," + // 5: lastUpdateTime
                "\"LAST_UPLOAD_TIME\" TEXT," + // 6: lastUploadTime
                "\"BLOOD_OXYGEN\" INTEGER NOT NULL ," + // 7: bloodOxygen
                "\"PI\" REAL NOT NULL ," + // 8: pi
                "\"PULSE_RATE\" INTEGER NOT NULL ," + // 9: pulseRate
                "\"RR\" INTEGER NOT NULL ," + // 10: RR
                "\"DEVICE_ID\" TEXT," + // 11: deviceId
                "\"SYNC_STATE\" INTEGER NOT NULL ," + // 12: syncState
                "\"CREATE_TIME\" TEXT," + // 13: createTime
                "\"LOG_DATE_TIME\" TEXT);"); // 14: logDateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OX_SPOT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OxSpotData entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(2, deviceName);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(4, serverId);
        }
 
        String measureDateTime = entity.getMeasureDateTime();
        if (measureDateTime != null) {
            stmt.bindString(5, measureDateTime);
        }
 
        String lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindString(6, lastUpdateTime);
        }
 
        String lastUploadTime = entity.getLastUploadTime();
        if (lastUploadTime != null) {
            stmt.bindString(7, lastUploadTime);
        }
        stmt.bindLong(8, entity.getBloodOxygen());
        stmt.bindDouble(9, entity.getPi());
        stmt.bindLong(10, entity.getPulseRate());
        stmt.bindLong(11, entity.getRR());
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(12, deviceId);
        }
        stmt.bindLong(13, entity.getSyncState());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(14, createTime);
        }
 
        String logDateTime = entity.getLogDateTime();
        if (logDateTime != null) {
            stmt.bindString(15, logDateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OxSpotData entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(2, deviceName);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(4, serverId);
        }
 
        String measureDateTime = entity.getMeasureDateTime();
        if (measureDateTime != null) {
            stmt.bindString(5, measureDateTime);
        }
 
        String lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindString(6, lastUpdateTime);
        }
 
        String lastUploadTime = entity.getLastUploadTime();
        if (lastUploadTime != null) {
            stmt.bindString(7, lastUploadTime);
        }
        stmt.bindLong(8, entity.getBloodOxygen());
        stmt.bindDouble(9, entity.getPi());
        stmt.bindLong(10, entity.getPulseRate());
        stmt.bindLong(11, entity.getRR());
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(12, deviceId);
        }
        stmt.bindLong(13, entity.getSyncState());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(14, createTime);
        }
 
        String logDateTime = entity.getLogDateTime();
        if (logDateTime != null) {
            stmt.bindString(15, logDateTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public OxSpotData readEntity(Cursor cursor, int offset) {
        OxSpotData entity = new OxSpotData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serverId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // measureDateTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastUpdateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastUploadTime
            cursor.getInt(offset + 7), // bloodOxygen
            cursor.getFloat(offset + 8), // pi
            cursor.getInt(offset + 9), // pulseRate
            cursor.getInt(offset + 10), // RR
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // deviceId
            cursor.getInt(offset + 12), // syncState
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // logDateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OxSpotData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeviceName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setServerId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMeasureDateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastUploadTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBloodOxygen(cursor.getInt(offset + 7));
        entity.setPi(cursor.getFloat(offset + 8));
        entity.setPulseRate(cursor.getInt(offset + 9));
        entity.setRR(cursor.getInt(offset + 10));
        entity.setDeviceId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSyncState(cursor.getInt(offset + 12));
        entity.setCreateTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLogDateTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(OxSpotData entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(OxSpotData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OxSpotData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
