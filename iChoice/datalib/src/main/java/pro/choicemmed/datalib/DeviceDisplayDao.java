package pro.choicemmed.datalib;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_DISPLAY".
*/
public class DeviceDisplayDao extends AbstractDao<DeviceDisplay, String> {

    public static final String TABLENAME = "DEVICE_DISPLAY";

    /**
     * Properties of entity DeviceDisplay.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property UserId = new Property(1, String.class, "UserId", false, "USER_ID");
        public final static Property BloodPressure = new Property(2, Integer.class, "BloodPressure", false, "BLOOD_PRESSURE");
        public final static Property Ecg = new Property(3, Integer.class, "Ecg", false, "ECG");
        public final static Property PulseOximeter = new Property(4, Integer.class, "PulseOximeter", false, "PULSE_OXIMETER");
        public final static Property WristPluseOximeter = new Property(5, Integer.class, "WristPluseOximeter", false, "WRIST_PLUSE_OXIMETER");
        public final static Property Thermometer = new Property(6, Integer.class, "Thermometer", false, "THERMOMETER");
        public final static Property Scale = new Property(7, Integer.class, "Scale", false, "SCALE");
        public final static Property FitnessTracker = new Property(8, Integer.class, "FitnessTracker", false, "FITNESS_TRACKER");
        public final static Property CreateTime = new Property(9, String.class, "createTime", false, "CREATE_TIME");
        public final static Property LastUpdateTime = new Property(10, String.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
        public final static Property LogDateTime = new Property(11, String.class, "logDateTime", false, "LOG_DATE_TIME");
    }


    public DeviceDisplayDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDisplayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_DISPLAY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"USER_ID\" TEXT," + // 1: UserId
                "\"BLOOD_PRESSURE\" INTEGER," + // 2: BloodPressure
                "\"ECG\" INTEGER," + // 3: Ecg
                "\"PULSE_OXIMETER\" INTEGER," + // 4: PulseOximeter
                "\"WRIST_PLUSE_OXIMETER\" INTEGER," + // 5: WristPluseOximeter
                "\"THERMOMETER\" INTEGER," + // 6: Thermometer
                "\"SCALE\" INTEGER," + // 7: Scale
                "\"FITNESS_TRACKER\" INTEGER," + // 8: FitnessTracker
                "\"CREATE_TIME\" TEXT," + // 9: createTime
                "\"LAST_UPDATE_TIME\" TEXT," + // 10: lastUpdateTime
                "\"LOG_DATE_TIME\" TEXT);"); // 11: logDateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_DISPLAY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceDisplay entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        Integer BloodPressure = entity.getBloodPressure();
        if (BloodPressure != null) {
            stmt.bindLong(3, BloodPressure);
        }
 
        Integer Ecg = entity.getEcg();
        if (Ecg != null) {
            stmt.bindLong(4, Ecg);
        }
 
        Integer PulseOximeter = entity.getPulseOximeter();
        if (PulseOximeter != null) {
            stmt.bindLong(5, PulseOximeter);
        }
 
        Integer WristPluseOximeter = entity.getWristPluseOximeter();
        if (WristPluseOximeter != null) {
            stmt.bindLong(6, WristPluseOximeter);
        }
 
        Integer Thermometer = entity.getThermometer();
        if (Thermometer != null) {
            stmt.bindLong(7, Thermometer);
        }
 
        Integer Scale = entity.getScale();
        if (Scale != null) {
            stmt.bindLong(8, Scale);
        }
 
        Integer FitnessTracker = entity.getFitnessTracker();
        if (FitnessTracker != null) {
            stmt.bindLong(9, FitnessTracker);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
 
        String lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindString(11, lastUpdateTime);
        }
 
        String logDateTime = entity.getLogDateTime();
        if (logDateTime != null) {
            stmt.bindString(12, logDateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceDisplay entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        Integer BloodPressure = entity.getBloodPressure();
        if (BloodPressure != null) {
            stmt.bindLong(3, BloodPressure);
        }
 
        Integer Ecg = entity.getEcg();
        if (Ecg != null) {
            stmt.bindLong(4, Ecg);
        }
 
        Integer PulseOximeter = entity.getPulseOximeter();
        if (PulseOximeter != null) {
            stmt.bindLong(5, PulseOximeter);
        }
 
        Integer WristPluseOximeter = entity.getWristPluseOximeter();
        if (WristPluseOximeter != null) {
            stmt.bindLong(6, WristPluseOximeter);
        }
 
        Integer Thermometer = entity.getThermometer();
        if (Thermometer != null) {
            stmt.bindLong(7, Thermometer);
        }
 
        Integer Scale = entity.getScale();
        if (Scale != null) {
            stmt.bindLong(8, Scale);
        }
 
        Integer FitnessTracker = entity.getFitnessTracker();
        if (FitnessTracker != null) {
            stmt.bindLong(9, FitnessTracker);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
 
        String lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindString(11, lastUpdateTime);
        }
 
        String logDateTime = entity.getLogDateTime();
        if (logDateTime != null) {
            stmt.bindString(12, logDateTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DeviceDisplay readEntity(Cursor cursor, int offset) {
        DeviceDisplay entity = new DeviceDisplay( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // BloodPressure
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Ecg
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // PulseOximeter
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // WristPluseOximeter
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // Thermometer
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // Scale
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // FitnessTracker
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lastUpdateTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // logDateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceDisplay entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBloodPressure(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEcg(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPulseOximeter(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setWristPluseOximeter(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setThermometer(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setScale(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setFitnessTracker(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLastUpdateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLogDateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DeviceDisplay entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(DeviceDisplay entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceDisplay entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
