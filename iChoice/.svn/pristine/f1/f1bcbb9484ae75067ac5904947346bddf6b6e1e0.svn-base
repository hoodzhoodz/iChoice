package com.choicemmed.ichoice.healthcheck.fragment.ecg;

import android.annotation.SuppressLint;
import android.arch.lifecycle.Observer;
import android.graphics.Typeface;
import android.icu.text.AlphabeticIndex;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.util.Log;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.choicemmed.blelibrary.base.DeviceType;
import com.choicemmed.blelibrary.cmd.HeartRateCmd;
import com.choicemmed.blelibrary.cmd.HeartRateCmdListener;
import com.choicemmed.common.ByteUtils;
import com.choicemmed.common.FormatUtils;
import com.choicemmed.common.LogUtils;
import com.choicemmed.common.NetUtils;
import com.choicemmed.common.ThreadManager;
import com.choicemmed.common.ToastUtils;
import com.choicemmed.ichoice.R;
import com.choicemmed.ichoice.framework.application.IchoiceApplication;
import com.choicemmed.ichoice.framework.base.BaseFragment;
import com.choicemmed.ichoice.framework.utils.DevicesType;
import com.choicemmed.ichoice.healthcheck.db.DeviceOperation;
import com.choicemmed.ichoice.healthcheck.view.EcgScaleView;
import com.choicemmed.ichoice.healthcheck.view.EcgView;
import com.choicemmed.ichoice.healthcheck.view.NoPaddingTextView;
import com.choicemmed.ichoice.healthcheck.view.ZoomControlView;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import butterknife.BindView;
import butterknife.OnClick;
import pro.choicemmed.datalib.DeviceInfo;
import pro.choicemmed.datalib.EcgData;

/**
 * Created by 117590 on 2020/8/20
 */
public class EcgMeasureFragment extends BaseFragment implements HeartRateCmdListener {
    private String TAG = this.getClass().getSimpleName();
    @BindView(R.id.home_vScaleView)
    EcgScaleView homeVScaleView;
    @BindView(R.id.home_vEcgBarView)
    EcgView homeVEcgBarView;
    @BindView(R.id.home_tv_scale)
    TextView homeTvScale;
    @BindView(R.id.home_zoomControls)
    ZoomControlView homeZoomControls;
    @BindView(R.id.tv_heart_rate)
    NoPaddingTextView txvMeanRate;

    private List<EcgData> recordList = new ArrayList<>();


    private EcgData showRecord;
    private boolean showZoomControls = true;
    private float mScale = 1f;

    private HeartRateCmd mHeartRateCmd;
    private int[] ecgDate;

    private String currentDate;

    private static final int MSG_CONNECT = 0;
    private static final int MSG_REFRESH = 1;
    private static final int MSG_SHOWTOAST = 2;

    // 心电设备发送命令响应
    private EcgData mEcgRecord = new EcgData();
    private EcgData mLastEcgRecord = null;

    @SuppressLint("HandlerLeak")
    private Handler bleHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case MSG_CONNECT:
                    String address = (String) msg.obj;
                    linkDevice(address);
                    break;
                case MSG_REFRESH:
                    EcgData record = (EcgData) msg.obj;
                    if (record != null) {
                        showRecord = record;
                    }
                    refreshUi(record);
                    uploadData();
                    break;
                case MSG_SHOWTOAST:
                    int toastMsgRid = msg.arg1;
                    if (toastMsgRid != -1) {
                        ToastUtils.showShort(getActivity(), getString(toastMsgRid));
                    } else {
                        String toastMsg = (String) msg.obj;
                        ToastUtils.showShort(getActivity(), toastMsg);
                    }
                    break;
                default:
                    break;
            }
        }
    };

    private void linkDevice(String address) {
        mHeartRateCmd.connectDevice(address);
    }

    @Override
    protected int contentViewID() {
        return R.layout.fragment_ecg_measure;
    }

    @Override
    protected void initialize() {
        txvMeanRate.setText("78");
        homeVEcgBarView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (showZoomControls) {
                    showZoomControls = false;
                    homeZoomControls.setVisibility(View.GONE);
                } else {
                    showZoomControls = true;
                    homeZoomControls.setVisibility(View.VISIBLE);
                }
            }
        });

        homeZoomControls.setOnButtonClicked(new ZoomControlView.OnButtonClicked() {
            @Override
            public void onLeftclicked() {
                if (mScale == 2) {
                    mScale = 1;
                    homeTvScale.setText("10mm/mV");
                } else if (mScale == 1) {
                    mScale = 0.5f;
                    homeTvScale.setText("5mm/mV");
                    homeZoomControls.setLeftEnable(false);
                }
                homeZoomControls.setRightEnable(true);
                homeVScaleView.scaleH(mScale);
                homeVEcgBarView.scaleH(mScale);
            }

            @Override
            public void onRightclicked() {
                if (mScale == 0.5f) {
                    mScale = 1;
                    homeTvScale.setText("10mm/mV");
                } else if (mScale == 1) {
                    mScale = 2;
                    homeTvScale.setText("20mm/mV");
                    homeZoomControls.setRightEnable(false);
                }
                homeZoomControls.setLeftEnable(true);
                homeVScaleView.scaleH(mScale);
                homeVEcgBarView.scaleH(mScale);
            }
        });
        mHeartRateCmd = new HeartRateCmd(getActivity(), this);
        currentDate = FormatUtils.getDateTimeString(Calendar.getInstance().getTime(), FormatUtils.template_DbDateTime);
    }

    @OnClick({R.id.bt_sync, R.id.bt_analysis})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.bt_sync:
                syncDevice();
                break;

        }
    }

    private void syncDevice() {

        List<DeviceInfo> devices = new DeviceOperation(IchoiceApplication.getInstance()).queryByUserIdType(IchoiceApplication.getAppData().userProfileInfo.getUserId(),
                DevicesType.Ecg);

        if (devices.isEmpty()) {
            LogUtils.d(TAG, " 没有绑定设备 ");
            return;
        }

        if (devices.get(0).getDeviceName().contains(DevicesType.A12_DEVICE_NAME)) {
            com.choicemmed.blelibrary.utils.FormatUtils.IsA12 = true;
        } else {
            com.choicemmed.blelibrary.utils.FormatUtils.IsA12 = false;
        }
        LogUtils.d(TAG, "   IsA12 " + com.choicemmed.blelibrary.utils.FormatUtils.IsA12 + " getDeviceName " + devices.get(0).getDeviceName());
        bleHandler.obtainMessage(MSG_CONNECT, devices.get(0).getBluetoothId()).sendToTarget();
    }

    private void refreshUi(EcgData record) {
        if (record == null) {
            return;
        }
        Log.e("===", "refreshUI:  " + record.getDecodeTime());
        currentDate = record.getDecodeTime();
        txvMeanRate.setText(record.getDecodeBpm() + "");
        if (record.getEcgTime().toLowerCase().startsWith("55aa61")) {
            IchoiceApplication.type = "P10";
        } else {
            IchoiceApplication.type = "A12";
        }

        if ("A12".equals(IchoiceApplication.type)) {
            if (!"".equals(record.getEcgData())) {
                ecgDate = uncompressA12bEcgData(record.getEcgData());
            }
        } else if ("P10".equals(IchoiceApplication.type)) {
            ecgDate = uncompressP10bEcgData(record.getEcgData());
        }
        homeVEcgBarView.redrawEcg(ecgDate);
    }


    private void uploadData() {
        ThreadManager.execute(new Runnable() {
            @Override
            public void run() {
                if (NetUtils.isConnected(getActivity())) {
//                    syncData2Server(HeartPalApplication.getCurrentUser());
                }
            }
        });
    }

    //    private void syncData2Server(User currentUser) {
//        Log.e("===", TestUtils.TestUtils());
//        List<Record> records = HeartPalApplication.getmInstance()
//                .getBoxStore().boxFor(Record.class).query()
//                .equal(Record_.userId, currentUser.getUserId())
//                .equal(Record_.syncStatus, 0)
//                .build().find();
//        if (records.size() > 0) {
//            for (Record r : records) {
//                dataTransfer(currentUser, r);
//            }
//        }
//        Log.e("===", TestUtils.TestUtils());
//    }
    public static int[] uncompressP10bEcgData(String ecgDataString) {
        if (ecgDataString.length() != 22512) {
            return null;
        }
        String ecgDataStringWithoutCmd = ecgDataString.substring(10, 22510);
        int[] result = new int[7500];
        for (int i = 0; i < result.length; i++) {
            result[i] = Integer.parseInt(ecgDataStringWithoutCmd.substring(i * 3, i * 3 + 3), 16);
        }
        return result;
    }

    public static int[] uncompressA12bEcgData(String ecgDataString) {
        String compressedEcgDataString = ecgDataString.substring(6, 15036);
        if (compressedEcgDataString == null || compressedEcgDataString.isEmpty()) {
            return null;
        }
        ArrayList<Byte> compressedEcgData = ByteUtils.hexString2List(compressedEcgDataString);
        ArrayList<Integer> ecgData = new ArrayList<Integer>();
        for (int i = 0; i < 15; i++) {
            // 每501个字节传输500个数据
            int start = i * 501;
            int end = start + 501;
            List<Byte> partialData = compressedEcgData.subList(start, end);

            for (int j = 0; j < 500; j++) {
                if (j == 0) {
                    int ecgPoint = ((partialData.get(j) & 0xff) << 8)
                            + ((partialData.get(j + 1) & 0xff));
                    ecgData.add(ecgPoint);
                } else {
                    if ((partialData.get(j + 1) & 0xff) < 128) {
                        // A(n+1) < 128:B(n) = B(n-1) + A(n+1)
                        int ecgPoint = ecgData.get(ecgData.size() - 1)
                                + (partialData.get(j + 1) & 0xff);
                        ecgData.add(ecgPoint);
                    } else {
                        // A(n+1) >= 128:B(n) = B(n-1) - A(n+1) +128
                        int ecgPoint = ecgData.get(ecgData.size() - 1)
                                - (partialData.get(j + 1) & 0xff) + 128;
                        ecgData.add(ecgPoint);
                    }
                }
            }
        }

        int[] result = new int[ecgData.size()];
        for (int i = 0; i < ecgData.size(); i++) {
            result[i] = ecgData.get(i);
        }
        return result;
    }


    @Override
    public void onFoundDevice(DeviceType deviceType, String address, String deviceName) {

    }

    @Override
    public void onScanTimeout(DeviceType deviceType) {
        bleHandler.obtainMessage(MSG_SHOWTOAST, R.string.error_scan_timeout, -1, null).sendToTarget();
        LogUtils.d(TAG, " onScanTimeout ");
    }

    @Override
    public void onError(DeviceType deviceType, String errorMsg) {
        bleHandler.obtainMessage(MSG_SHOWTOAST, -1, -1, errorMsg).sendToTarget();
        LogUtils.d(TAG, " onError " + "  deviceType " + deviceType + "  errorMsg " + errorMsg);
    }

    @Override
    public void onDisconnected(DeviceType deviceType) {
        LogUtils.d(TAG, " onDisconnected ");
    }

    @Override
    public void onLoadBegin() {
        mEcgRecord = new EcgData();
        mLastEcgRecord = null;
        LogUtils.d(TAG, " onLoadBegin ");
    }

    @Override
    public void onRecordInfoResponse(String recordInfo, String measureTime, int ecgHeartRate, int ecgResult, String ecgErrorCode) {
        mEcgRecord = new EcgData();
        mEcgRecord.setEcgTime(recordInfo);
        mEcgRecord.setDecodeTime(measureTime);
        mEcgRecord.setDecodeBpm(ecgHeartRate);
        LogUtils.d(TAG, " onRecordInfoResponse " + mEcgRecord.toString());

    }

    @Override
    public boolean onEcgDataResponse(String ecgData) {
        LogUtils.d(TAG, " onEcgDataResponse ecgData " + ecgData);
        return false;
    }

    @Override
    public void onLoadEnd(boolean success, String errorMsg, String type) {
//        IchoiceApplication.type = type;
        Log.e("wangsj", "onLoadEnd: " + success);
        if (!success) {
            bleHandler.obtainMessage(MSG_SHOWTOAST, -1, -1, errorMsg).sendToTarget();
        } else {
            bleHandler.obtainMessage(MSG_REFRESH, mLastEcgRecord).sendToTarget();
        }
        LogUtils.d(TAG, " onLoadEnd");
    }
}
