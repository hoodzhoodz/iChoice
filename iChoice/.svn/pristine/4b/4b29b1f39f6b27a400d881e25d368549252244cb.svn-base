package pro.choicemmed.datalib;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_INFO".
*/
public class DeviceInfoDao extends AbstractDao<DeviceInfo, String> {

    public static final String TABLENAME = "DEVICE_INFO";

    /**
     * Properties of entity DeviceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property BluetoothId = new Property(2, String.class, "bluetoothId", false, "BLUETOOTH_ID");
        public final static Property DeviceId = new Property(3, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property DeviceName = new Property(4, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceType = new Property(5, Integer.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property TypeName = new Property(6, String.class, "TypeName", false, "TYPE_NAME");
        public final static Property CreateTime = new Property(7, String.class, "createTime", false, "CREATE_TIME");
        public final static Property LastUpdateTime = new Property(8, String.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
        public final static Property LogDateTime = new Property(9, String.class, "logDateTime", false, "LOG_DATE_TIME");
    }


    public DeviceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"BLUETOOTH_ID\" TEXT," + // 2: bluetoothId
                "\"DEVICE_ID\" TEXT," + // 3: deviceId
                "\"DEVICE_NAME\" TEXT," + // 4: deviceName
                "\"DEVICE_TYPE\" INTEGER," + // 5: deviceType
                "\"TYPE_NAME\" TEXT," + // 6: TypeName
                "\"CREATE_TIME\" TEXT," + // 7: createTime
                "\"LAST_UPDATE_TIME\" TEXT," + // 8: lastUpdateTime
                "\"LOG_DATE_TIME\" TEXT);"); // 9: logDateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceInfo entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String bluetoothId = entity.getBluetoothId();
        if (bluetoothId != null) {
            stmt.bindString(3, bluetoothId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(5, deviceName);
        }
 
        Integer deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindLong(6, deviceType);
        }
 
        String TypeName = entity.getTypeName();
        if (TypeName != null) {
            stmt.bindString(7, TypeName);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
 
        String lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindString(9, lastUpdateTime);
        }
 
        String logDateTime = entity.getLogDateTime();
        if (logDateTime != null) {
            stmt.bindString(10, logDateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceInfo entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String bluetoothId = entity.getBluetoothId();
        if (bluetoothId != null) {
            stmt.bindString(3, bluetoothId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(5, deviceName);
        }
 
        Integer deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindLong(6, deviceType);
        }
 
        String TypeName = entity.getTypeName();
        if (TypeName != null) {
            stmt.bindString(7, TypeName);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
 
        String lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindString(9, lastUpdateTime);
        }
 
        String logDateTime = entity.getLogDateTime();
        if (logDateTime != null) {
            stmt.bindString(10, logDateTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DeviceInfo readEntity(Cursor cursor, int offset) {
        DeviceInfo entity = new DeviceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bluetoothId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // deviceType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TypeName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lastUpdateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // logDateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBluetoothId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTypeName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLastUpdateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLogDateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DeviceInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DeviceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
